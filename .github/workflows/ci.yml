name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  prelaunch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt # Production dependencies
          pip install -r requirements-dev.txt # Development/CI dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend/dev_dashboard
          yarn install --frozen-lockfile
      - name: Create .env from secrets
        run: |
          cat <<EOF > .env
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          SERPER_API_KEY=${{ secrets.SERPER_API_KEY }}
          GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          GCP_REGION=${{ secrets.GCP_REGION }}
          GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}
          WORKER_URL=${{ secrets.WORKER_URL }}
          TASK_QUEUE_NAME=${{ secrets.TASK_QUEUE_NAME }}
          TASK_QUEUE_LOCATION=${{ secrets.TASK_QUEUE_LOCATION }}
          # Add any other required variables here
          EOF
      - name: Pre-launch validation
        run: bash app/lifecycle/tasks/prelaunch_validate.sh
      - name: Build
        run: bash app/lifecycle/tasks/prelaunch_build.sh
      - name: Run backend tests
        run: pytest app/tests
      # - name: AI Review (optional, requires local runner)
      #   run: python app/lifecycle/tasks/prelaunch_ai_review.py
      #   env:
      #     USE_LMSTUDIO: "1"  # Set to use LM Studio, unset for Ollama
      # Add deployment steps here (to your server, cloud, etc.) 