name: Deploy to Staging

on:
  push:
    branches: # Trigger on push to your main development branch
      - main

permissions:
  contents: 'read'
  id-token: 'write'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Ensure you have staging-specific secrets if needed
  GAR_LOCATION: us-central1
  # Use a generic name for the Artifact Registry repo, as the image is shared
  GAR_REPO_NAME: 'creator-cmd-center-staging'
  SERVICE_NAME_WEB: 'creator-cmd-center-staging-web'
  SERVICE_NAME_WORKER: 'creator-cmd-center-staging-worker'
  REGION: us-central1

jobs:
  build-and-push:
    name: 'Build and Push Image'
    environment: staging # Use the 'staging' GitHub Environment for secrets
    uses: ./.github/workflows/reusable-build.yml
    with:
      service_name: ${{ env.GAR_REPO_NAME }}
    secrets: inherit

  run-migrations:
    name: 'Run Database Migrations'
    runs-on: ubuntu-latest
    needs: build-and-push # Run after the image is built

    environment: staging # Scope this job to the staging environment
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Deploy Cloud Run Job for migrations
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME_WEB }}-migrations
          job: true # Specifies this is a Cloud Run Job
          image: ${{ needs.build-and-push.outputs.image_tag }}
          region: ${{ env.REGION }}
          container_command: "alembic"
          container_args: "upgrade,head"
          secrets: "DATABASE_URL:LATEST" # Use a staging DB secret

  deploy-services:
    name: 'Deploy Web and Worker Services to Staging'
    runs-on: ubuntu-latest
    needs: run-migrations # Run after migrations are complete
    environment: # Scope this job to the staging environment and set the URL
      name: staging
      url: ${{ steps.deploy-web.outputs.url }}
    outputs:
      url: ${{ steps.deploy-web.outputs.url }}

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set Artifact Registry Cleanup Policy
        run: |
          gcloud artifacts repositories set-cleanup-policies ${{ env.GAR_REPO_NAME }} \
            --project=${{ env.PROJECT_ID }} \
            --location=${{ env.GAR_LOCATION }} \
            --policy='{
                "name": "delete-untagged-after-15-days",
                "action": {"type": "Delete"},
                "condition": {
                  "olderThan": "1296000s",
                  "tagState": "UNTAGGED"
                }
              }'

      - name: Deploy Web Service
        id: deploy-web
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME_WEB }}
          region: ${{ env.REGION }}
          min_instances: 0
          vpc_connector: 'main-app-connector' # Ensure staging has access to the VPC
          image: ${{ needs.build-and-push.outputs.image_tag }}
          secrets: |-
            DATABASE_URL:LATEST
            REDIS_URL:LATEST
            SECRET_KEY:LATEST
            GOOGLE_CLIENT_ID:LATEST
            GOOGLE_CLIENT_SECRET:LATEST

      - name: Deploy Worker Service
        id: deploy-worker
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME_WORKER }}
          region: ${{ env.REGION }}
          min_instances: 0
          vpc_connector: 'main-app-connector'
          image: ${{ needs.build-and-push.outputs.image_tag }}
          no_traffic: true
          container_command: "celery"
          container_args: "-A,app.backend.tasks.celery_app,worker,--loglevel=info"
          secrets: |-
            DATABASE_URL:LATEST
            REDIS_URL:LATEST
            SECRET_KEY:LATEST

      - name: Show Deployed URLs
        run: |-
          echo "Staging Web service deployed to: ${{ steps.deploy-web.outputs.url }}"
          echo "Staging Worker service deployed."

      - name: Clean up old revisions
        if: success()
        run: |
          echo "--- Cleaning up old revisions for ${{ env.SERVICE_NAME_WEB }} ---"
          gcloud run revisions list --service=${{ env.SERVICE_NAME_WEB }} --region=${{ env.REGION }} --sort-by=~creationTimestamp --format='get(metadata.name)' | tail -n +4 | xargs -r gcloud run revisions delete --region=${{ env.REGION }} --quiet

          echo "--- Cleaning up old revisions for ${{ env.SERVICE_NAME_WORKER }} ---"
          gcloud run revisions list --service=${{ env.SERVICE_NAME_WORKER }} --region=${{ env.REGION }} --sort-by=~creationTimestamp --format='get(metadata.name)' | tail -n +4 | xargs -r gcloud run revisions delete --region=${{ env.REGION }} --quiet