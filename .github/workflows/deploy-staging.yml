name: Deploy to Staging

on:
  push:
    branches: # Trigger on push to your main development branch
      - main

permissions:
  contents: 'read'
  id-token: 'write'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Ensure you have staging-specific secrets if needed
  GAR_LOCATION: us-central1
  # Use a generic name for the Artifact Registry repo, as the image is shared
  GAR_REPO_NAME: 'creator-cmd-center-staging'
  SERVICE_NAME_WEB: 'creator-cmd-center-staging-web'
  SERVICE_NAME_WORKER: 'creator-cmd-center-staging-worker'
  API_SA_EMAIL: 'api-service-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
  WORKER_SA_EMAIL: 'worker-service-sa@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com'
  REGION: us-central1

jobs:
  build-and-push:
    name: 'Build and Push Image'
    runs-on: ubuntu-latest
    environment: staging # Scope this job to the staging environment
    outputs:
      image_tag: ${{ format('{0}-docker.pkg.dev/{1}/{2}/image:{3}', env.GAR_LOCATION, env.PROJECT_ID, env.GAR_REPO_NAME, github.sha) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth # Add an ID to reference the output
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        id: docker-build
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO_NAME }}/image:${{ github.sha }}

  run-migrations:
    name: 'Run Database Migrations'
    runs-on: ubuntu-latest
    needs: build-and-push # Run after the image is built
    environment: staging # Scope this job to the staging environment

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Deploy Cloud Run Job for migrations
        run: |
          # Delete existing job if it exists
          gcloud run jobs delete ${{ env.SERVICE_NAME_WEB }}-migrations \
            --region=${{ env.REGION }} \
            --quiet || echo "Job doesn't exist, continuing..."
          
          # Create new job
          gcloud run jobs create ${{ env.SERVICE_NAME_WEB }}-migrations \
            --image=${{ needs.build-and-push.outputs.image_tag }} \
            --region=${{ env.REGION }} \
            --service-account=${{ env.API_SA_EMAIL }} \
            --set-secrets=DATABASE_URL=DATABASE_URL:LATEST \
            --command="alembic" \
            --args="upgrade,head"
          
          # Execute the migration job
          gcloud run jobs execute ${{ env.SERVICE_NAME_WEB }}-migrations \
            --region=${{ env.REGION }} \
            --wait

  deploy-services:
    name: 'Deploy Web and Worker Services to Staging'
    runs-on: ubuntu-latest
    needs: run-migrations # Run after migrations are complete
    environment: # Set the deployment URL for the environment
      name: staging
      url: ${{ steps.deploy-web.outputs.url }}
    outputs:
      url: ${{ steps.deploy-web.outputs.url }}

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set Artifact Registry Cleanup Policy
        run: |
          gcloud artifacts repositories set-cleanup-policies ${{ env.GAR_REPO_NAME }} \
            --project=${{ env.PROJECT_ID }} \
            --location=${{ env.GAR_LOCATION }} \
            --policy='{
                "name": "delete-untagged-after-15-days",
                "action": {"type": "Delete"},
                "condition": {
                  "olderThan": "1296000s",
                  "tagState": "UNTAGGED"
                }
              }'

      - name: Deploy Web Service
        id: deploy-web
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME_WEB }} \
            --image=${{ needs.build-and-push.outputs.image_tag }} \
            --region=${{ env.REGION }} \
            --service-account=${{ env.API_SA_EMAIL }} \
            --min-instances=0 \
            --vpc-connector=main-app-connector \
            --set-secrets=DATABASE_URL=DATABASE_URL:LATEST,REDIS_URL=REDIS_URL:LATEST,SECRET_KEY=SECRET_KEY:LATEST,GOOGLE_CLIENT_ID=GOOGLE_CLIENT_ID:LATEST,GOOGLE_CLIENT_SECRET=GOOGLE_CLIENT_SECRET:LATEST \
            --allow-unauthenticated
          
          # Output the service URL for environment deployment
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME_WEB }} --region=${{ env.REGION }} --format="value(status.url)")
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT

      - name: Deploy Worker Service
        id: deploy-worker
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME_WORKER }} \
            --image=${{ needs.build-and-push.outputs.image_tag }} \
            --region=${{ env.REGION }} \
            --service-account=${{ env.WORKER_SA_EMAIL }} \
            --min-instances=0 \
            --vpc-connector=main-app-connector \
            --no-allow-unauthenticated \
            --no-traffic \
            --command=celery \
            --args="-A,app.backend.tasks.celery_app,worker,--loglevel=info" \
            --set-secrets=DATABASE_URL=DATABASE_URL:LATEST,REDIS_URL=REDIS_URL:LATEST,SECRET_KEY=SECRET_KEY:LATEST

      - name: Show Deployed URLs
        run: |-
          echo "Staging Web service deployed to: ${{ steps.deploy-web.outputs.url }}"
          echo "Staging Worker service deployed."

      - name: Clean up old revisions
        if: success()
        run: |
          echo "--- Cleaning up old revisions for ${{ env.SERVICE_NAME_WEB }} ---"
          gcloud run revisions list --service=${{ env.SERVICE_NAME_WEB }} --region=${{ env.REGION }} --sort-by=~creationTimestamp --format='get(metadata.name)' | tail -n +4 | xargs -r gcloud run revisions delete --region=${{ env.REGION }} --quiet

          echo "--- Cleaning up old revisions for ${{ env.SERVICE_NAME_WORKER }} ---"
          gcloud run revisions list --service=${{ env.SERVICE_NAME_WORKER }} --region=${{ env.REGION }} --sort-by=~creationTimestamp --format='get(metadata.name)' | tail -n +4 | xargs -r gcloud run revisions delete --region=${{ env.REGION }} --quiet