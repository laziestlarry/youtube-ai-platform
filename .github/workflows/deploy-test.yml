name: Deploy to Test Environment

on:
  push:
    branches: # Trigger on push to your develop branch
      - develop

permissions:
  contents: 'read'
  id-token: 'write'

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }} # Ensure you have test-specific secrets if needed
  GAR_LOCATION: us-central1
  GAR_REPO_NAME: 'creator-cmd-center-test'
  SERVICE_NAME_WEB: 'creator-cmd-center-test-web'
  SERVICE_NAME_WORKER: 'creator-cmd-center-test-worker'
  API_SA_EMAIL: 'api-service-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'
  WORKER_SA_EMAIL: 'worker-service-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com'
  REGION: us-central1

jobs:
  build-and-push:
    name: 'Build and Push Image'
    runs-on: ubuntu-latest
    environment: test # Scope this job to the test environment
    outputs:
      image_tag: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO_NAME }}/image:${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Google Artifact Registry
        id: docker-login
        run: gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.GAR_REPO_NAME }}/image:${{ github.sha }}

  run-migrations:
    name: 'Run Database Migrations'
    runs-on: ubuntu-latest
    needs: build-and-push # Run after the image is built
    environment: test # Scope this job to the test environment

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Deploy Cloud Run Job for migrations
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME_WEB }}-migrations
          service_account: ${{ env.API_SA_EMAIL }} # Run migrations as the API service account
          job: true # Specifies this is a Cloud Run Job
          image: ${{ needs.build-and-push.outputs.image_tag }}
          region: ${{ env.REGION }}
          container_command: "alembic"
          container_args: "upgrade,head"
          secrets: "DATABASE_URL:LATEST" # Use a test DB secret

  deploy-services:
    name: 'Deploy Web and Worker Services to Test'
    runs-on: ubuntu-latest
    needs: run-migrations # Run after migrations are complete
    environment: # Set the deployment URL for the environment
      name: test
      url: ${{ steps.deploy-web.outputs.url }}
    outputs:
      url: ${{ steps.deploy-web.outputs.url }}

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}

      - name: Deploy Web Service
        id: deploy-web
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME_WEB }}
          service_account: ${{ env.API_SA_EMAIL }} # Specify the runtime identity
          region: ${{ env.REGION }}
          min_instances: 0
          image: ${{ needs.build-and-push.outputs.image_tag }}
          secrets: |-
            DATABASE_URL:LATEST
            REDIS_URL:LATEST
            SECRET_KEY:LATEST
            GOOGLE_CLIENT_ID:LATEST
            GOOGLE_CLIENT_SECRET:LATEST

      - name: Deploy Worker Service
        id: deploy-worker
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: ${{ env.SERVICE_NAME_WORKER }}
          service_account: ${{ env.WORKER_SA_EMAIL }} # Specify the runtime identity
          region: ${{ env.REGION }}
          min_instances: 0
          image: ${{ needs.build-and-push.outputs.image_tag }}
          no_traffic: true
          container_command: "celery"
          container_args: "-A,app.backend.tasks.celery_app,worker,--loglevel=info"
          secrets: |-
            DATABASE_URL:LATEST
            REDIS_URL:LATEST
            SECRET_KEY:LATEST

      - name: Show Deployed URLs
        run: |-
          echo "Test Web service deployed to: ${{ steps.deploy-web.outputs.url }}"
          echo "Test Worker service deployed."

      - name: Clean up old revisions
        if: success()
        run: |
          echo "--- Cleaning up old revisions for ${{ env.SERVICE_NAME_WEB }} ---"
          gcloud run revisions list --service=${{ env.SERVICE_NAME_WEB }} --region=${{ env.REGION }} --sort-by=~creationTimestamp --format='get(metadata.name)' | tail -n +4 | xargs -r gcloud run revisions delete --region=${{ env.REGION }} --quiet

          echo "--- Cleaning up old revisions for ${{ env.SERVICE_NAME_WORKER }} ---"
          gcloud run revisions list --service=${{ env.SERVICE_NAME_WORKER }} --region=${{ env.REGION }} --sort-by=~creationTimestamp --format='get(metadata.name)' | tail -n +4 | xargs -r gcloud run revisions delete --region=${{ env.REGION }} --quiet