# Dockerfile.api
# Stage 1: Build Frontend
FROM node:18-alpine AS frontend-builder
WORKDIR /app

# Copy package files first to leverage Docker cache
COPY frontend/dev_dashboard/package.json ./
COPY frontend/dev_dashboard/yarn.lock ./

# Install dependencies
RUN yarn install --frozen-lockfile

# Copy the rest of the source code and build the application
COPY frontend/dev_dashboard/ ./
RUN yarn build

# Stage 2: Install Python Dependencies
FROM python:3.11-slim AS backend-builder
WORKDIR /app

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

COPY app/requirements.txt app/requirements.txt
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r app/requirements.txt && \
    pip install --no-cache-dir gunicorn 'uvicorn[standard]'

# Final Stage: Production Image for API
FROM python:3.11-slim
WORKDIR /app

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

RUN apt-get update && apt-get install -y --no-install-recommends curl && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY app ./app

# Copy the built frontend assets to a static directory.
# Note: Your API backend (app/backend/main.py) must be configured to serve these files.
COPY --from=frontend-builder /app/frontend/dev_dashboard/build ./app/static

CMD ["gunicorn", "app.backend.main:app", "--bind", "0.0.0.0:8000", "--workers", "3", "--worker-class", "uvicorn.workers.UvicornWorker", "--log-level", "info"]