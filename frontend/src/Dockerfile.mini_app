# Stage 1: Build the React frontend
FROM node:18-alpine as frontend-builder

# Set the working directory for the frontend application
WORKDIR /app/frontend

# Copy package.json and yarn.lock first to leverage Docker cache
# Assuming package.json and yarn.lock are directly in the 'frontend/' directory
COPY frontend/package.json ./
COPY frontend/yarn.lock ./

# Install frontend dependencies
RUN yarn install --frozen-lockfile

# Copy the rest of the frontend source code
COPY frontend/ ./

# Build the React application
# This command will generate static assets, typically in a 'build' directory
RUN yarn build

# Stage 2: Build the Python mini-app and serve the frontend
FROM python:3.10-slim

# Set the working directory for the Python application
WORKDIR /app

# Install system dependencies (ffmpeg as per DEPLOYMENT.md)
RUN apt-get update && apt-get install -y ffmpeg --no-install-recommends && rm -rf /var/lib/apt/lists/*

# Copy Python application code and requirements
COPY mini_app/ ./mini_app/
COPY app/requirements.txt ./app/requirements.txt # Assuming shared requirements
COPY mini_app/requirements.txt ./mini_app/requirements.txt

# Install Python dependencies
RUN pip install --no-cache-dir -r app/requirements.txt && \
    pip install --no-cache-dir -r mini_app/requirements.txt

# Copy built frontend assets from the builder stage into the Python app's static directory
# IMPORTANT: Your mini_app Python service must be configured to serve static files from this path.
# For example, if using FastAPI, you'd mount StaticFiles(directory="mini_app/static").
COPY --from=frontend-builder /app/frontend/build ./mini_app/static

# Set the entrypoint for the mini-app Python service
# Replace with the actual command to start your mini_app (e.g., uvicorn, gunicorn, python script)
# For Cloud Run, it typically listens on the PORT environment variable.
CMD ["python", "mini_app/main.py"] # Placeholder: Adjust this to your actual mini_app startup command